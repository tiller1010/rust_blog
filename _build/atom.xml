<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id></id>
  <title>Tyler Trout's Blog</title>
  <updated>2023-10-07T22:22:14-04:00</updated>
  <subtitle>Full Stack Web Development</subtitle>
  <icon>/media/favicon.png</icon>
  <logo>/media/favicon.png</logo>
  <link rel="alternate" type="text/html" href="" />
  <link rel="self" type="application/atom+xml" href="/atom.xml" />
  <generator uri="https://github.com/FuGangqiang/mdblog.rs">mdblog.rs</generator>
  <entry>
    <id>/posts%5Crebuilding_my_blog.html</id>
    <title>rebuilding%20my%20blog</title>
    <updated>2023-10-03T08:36:50-04:00</updated>
    <published>2023-10-03T08:36:50-04:00</published>
    <link href="/posts%5Crebuilding_my_blog.html"/>
    <summary>tags%3A%20%5Brust%5D%20%23%20Rebuilding%20a%20WordPress%20blog%20with%20rust%20WordPress%20is%20a%20great%20platform%20to%20get%20started%20blogging%20with%2C%20but%20for%20me%2C%20it%27s%20more%20than%20what%20I%20really%20need.%20I%20don%27t%20need%20a%20database%2C%20I%20don%27t%20need%20a%20web%20server%2C%20and%20I%20don%27t%20need%20a%20CMS.%20At%20the%20end%20of%20the%20day%2C%20all%20I%20really%20need%20is%20static%20HTML%2C%20CSS%2C%20and%20JavaScript.%20%23%23%20Save%20some%20money%20Premium%20Web%20hosting%20with%20Hostinger%20costs%20about%20%2490%20a%20year.%20That%27s%20money%20I%20could%20be%20saving%20by%20switching%20to%20free%20hosting%20with%20GitHub%20Pages.%20%23%23%20What%20about%20content%20management%3F%20I%27m%20a%20developer%2C%20so%20I%27m...</summary>
    <content type="html" xml:lang="en" xml:base="">
        <![CDATA[
        <p>tags: [rust]</p>
<h1>Rebuilding a WordPress blog with rust</h1>
<p>WordPress is a great platform to get started blogging with, but for me, it's more than what I really need. I don't need a database, I don't need a web server, and I don't need a CMS. At the end of the day, all I really need is static HTML, CSS, and JavaScript.</p>
<h2>Save some money</h2>
<p>Premium Web hosting with Hostinger costs about $90 a year. That's money I could be saving by switching to free hosting with GitHub Pages.</p>
<h2>What about content management?</h2>
<p>I'm a developer, so I'm comfortable with writing markdown. I decided to use a static site generator to convert my markdown files into HTML. I chose mdblog, a cargo crate I found on <a href="https://crates.io">crates.io</a>. This crate, however, had lacking support for Windows environments (still my daily driver), so I was required to fork it and make updates myself. This mostly involved adding checks for carriage returns in post files.</p>
<h2>Importing posts</h2>
<p>I had to write a script to convert my WordPress posts into markdown files. I exported my posts from WordPress as an XML file. Then I wrote a script to parse the XML file and convert the posts into markdown files. I used the crate &quot;html2md&quot; to convert the HTML content from my posts into the markdown format, after which the script outputs markdown files for each post. I then use those markdown files to generate HTML files from the mdblog templates. The journey of my posts starts at the HTML embedded in the WordPress XML export file, to markdown files, back to formatted HTML files.</p>
<h2>Isn't that more work than necessary?</h2>
<p>It is, but it doesn't come without benefits. I can now write my posts in markdown, and I can use git to track changes to my blog. My local text editor is a highly customized Neovim, which makes writing and editing posts much faster and more intuitive to me. This also comes with the added benefit of AI assisted writing, via GitHub Copilot.</p>
<h2>Outcome</h2>
<p>Overall, I'm happy with how the new blog turned out. I did, unfortunately, have to sacrifice some features, such as the ability to edit with the WordPress mobile app and the ability for users to leave comments, but I think the trade-off was worth it (most comments were spam anyway). My hosting is now free, I do not need to worry about spam comment, and editing the blog posts is now easier than ever.</p>

        ]]>
    </content>
  </entry><entry>
    <id>/posts%5CManage_multiple_versions_with_gitflow_and_GitHub.html</id>
    <title>Manage%20multiple%20versions%20with%20gitflow%20and%20GitHub</title>
    <updated>2022-09-04T21:46:01+00:00</updated>
    <published>2022-09-04T21:46:01+00:00</published>
    <link href="/posts%5CManage_multiple_versions_with_gitflow_and_GitHub.html"/>
    <summary>%23%20Manage%20multiple%20versions%20with%20gitflow%20and%20GitHub...</summary>
    <content type="html" xml:lang="en" xml:base="">
        <![CDATA[
        <h1>Manage multiple versions with gitflow and GitHub</h1>
<p>Imagine this: you want to add a new feature to a repository, but it involves a change that will break backward compatibility. You could release a new major version, but other repositories may depend on the previous version of your software. In this case, you need to support an older version simultaneously with the next major version. Git-flow is a branching strategy that eases the burden of managing multiple versions, but it can be tricky to implement in a team using GitHub. Git-flow provides several benefits:</p>
<ul>
<li>Git-flow uses distinct and obvious branch roles: branches are annotated with their specific purpose (feature, release, support, and hotfix).</li>
<li>Git-flow keeps consistent histories: patches made for older versions are automatically merged back into the development branch.</li>
<li>Git-flow uses a release branching strategy that ensures a higher quality of released software, and lower stress for the developer managing branches, as release branches are deleted as soon as they are merged and tagged.</li>
</ul>
<p>These benefits can be achieved in a GitHub setting, but it requires some manual automation with GitHub actions.</p>
<h2>&quot;feature/feature_name&quot; into &quot;develop&quot;</h2>
<p>All new features should be created from the &quot;develop&quot; branch. No GitHub actions need to run on pull requests created for feature branches into the develop branch, but you may choose to enforce labels on your features. Making sure the feature in review has the appropriate semantic versioning label will be helpful for when we create &quot;release&quot; branches later.</p>
<h2>Draft a release on &quot;release/*&quot; push</h2>
<p>By far the best benefit of using git-flow with GitHub is that releases can be properly reviewed in the form of a pull request. A GitHub action could be created that drafts a release when a push is made to a &quot;release/*&quot; branch.</p>
<pre><code>on:
  push:
    branches:
      - release/*

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      # Get the release tag
      - name: Get release Tag
        id: get_release_tag
        run: |
          RELEASETAG=$(git branch | grep \* | sed -re &quot;s/release\///;s/\*//;s/\s*//g&quot;)
          echo &quot;::set-output name=release_tag::$RELEASETAG&quot;

      # Draft Release with release branch
      - name: Draft Release with release branch
        id: update_release_draft_with_release_branch
        uses: release-drafter/release-drafter@master
        with:
          tag: ${{ steps.get_release_tag.outputs.release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</code></pre>
<h2>Publish the draft release when &quot;release/*&quot; PRs are merged</h2>
<p>When a release branch is merged into &quot;main&quot; the release that was drafted for that pull request can be published. Doing so creates a tag. After the corresponding release is published, the &quot;release/*&quot; branch can be automatically deleted by a GitHub action.</p>
<pre><code>on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  publish_release:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    steps:
      # Get the latest draft release. This requires authentication.
      - name: Get release id
        id: get_release_id
        run: |
          TOKEN=${{ secrets.GITHUB_TOKEN }}
          RELEASEID=$(curl -H &quot;Accept: application/vnd.github+json&quot; -H &quot;Authorization: token $TOKEN&quot; https://api.github.com/repos/[YOURNAME]/[REPONAME]/releases)
          RELEASEID=$(echo &quot;$RELEASEID&quot; | grep \&quot;id\&quot;  | head -n 1 | sed -re &quot;s/[a-z]*//g;s/[-|,|:|'\&quot;]//g;s/\s//g&quot;)
          echo &quot;::set-output name=release_id::$RELEASEID&quot;
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish the release draft
      - name: Publish release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.get_release_id.outputs.release_id }}

      # Get payload info from the pull request
      - name: Payload info
        id: payload_info
        uses: Dovyski/payload-info-action@master
        continue-on-error: true

      # Remove the release or hotfix branch after publishing
      - name: Remove PR branch
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{github.token}}
          branches: ${{ steps.payload_info.outputs.branch }}
</code></pre>
<h2>Merge main into develop</h2>
<p>After a release branch is merged into the main branch, it should be merged back into the &quot;develop&quot; branch. Optionally, you could set GitHub actions to create a commit that updates a CHANGELOG.md file before this merge occurs.</p>
<pre><code>on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  sync_develop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Merge main -&gt; develop
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: main
          target_branch: develop
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: Merged main into develop
</code></pre>
<h2>Draft releases on &quot;hotfix/*&quot; push</h2>
<p>When you must support a previous minor or major version, you should start by checking out that tag. Make sure to checkout the latest patch for that minor or major version. Then, you should create a &quot;support/*.x&quot; branch. Support branches should function similarly to the &quot;main&quot; branch. Tags will be created when &quot;hotfix/*&quot; branches are merged into it, and commits should <strong>not</strong> be added to it directly. After creating the support branch, a &quot;hotfix/*&quot; branch with the next patch number should be created. These are similar to the &quot;release/*&quot; branches, as they should be reviewed in a pull request, and when they are merged, Git actions should <strong>publish</strong> the drafted release and delete the &quot;hotfix/*&quot; branch (similar to when a &quot;release/*&quot; branch is merged, see the above example).</p>
<pre><code>on:
  push:
    branches:
      - hotfix/*

jobs:
  update_release_draft:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      # Get the hotfix tag
      - name: Get hotfix Tag
        id: get_hotfix_tag
        run: |
          RELEASETAG=$(git branch | grep \* | sed -re &quot;s/hotfix\///;s/\*//;s/\s*//g&quot;)
          echo &quot;::set-output name=release_tag::$RELEASETAG&quot;

      # Draft Release with hotfix branch
      - name: Draft Release with hotfix branch
        id: update_release_draft_with_hotfix_branch
        uses: release-drafter/release-drafter@master
        with:
          tag: ${{ steps.get_hotfix_tag.outputs.release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</code></pre>
<h2>Merge support into main and develop</h2>
<p>If a bug existed in a previous version, it is likely that it still exists in the latest version too. Similar to &quot;release/*&quot; branches that are merged into the main branch, support branches too should be merged into the main branch and then merged again into the develop branch when a &quot;hotfix/*&quot; branch is merged into one. There is, however, a higher potential for this merge to conflict with the main branch. In that case, a developer must resolve the conflict on their own, and push the resolved merge into the main branch.</p>
<pre><code>on:
  push:
    branches:
      - support/*

permissions:
  contents: write

jobs:
  sync_develop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      # Get the support branch
      - name: Get support branch
        id: get_support_branch
        run: |
          SUPPORTBRANCH=$(git branch | grep \* | sed -re &quot;s/[\*|\ ]//g&quot;)
          echo &quot;::set-output name=support_branch::$SUPPORTBRANCH&quot;

      - name: Merge support -&gt; main
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: ${{ steps.get_support_branch.outputs.support_branch }}
          target_branch: main
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: Merged ${{ steps.get_support_branch.outputs.support_branch }} into main

      - name: Merge main -&gt; develop
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: main
          target_branch: develop
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: Merged main into develop
</code></pre>
<p>I hope you decide to use git-flow in your projects! It adds much-needed sanity to the management of multiple versions of software.</p>

        ]]>
    </content>
  </entry><entry>
    <id>/posts%5CWrite_Reusable_PHP.html</id>
    <title>Write%20Reusable%20PHP</title>
    <updated>2021-07-05T00:15:38+00:00</updated>
    <published>2021-07-05T00:15:38+00:00</published>
    <link href="/posts%5CWrite_Reusable_PHP.html"/>
    <summary>%23%20Write%20Reusable%20PHP...</summary>
    <content type="html" xml:lang="en" xml:base="">
        <![CDATA[
        <h1>Write Reusable PHP</h1>
<p>Have you ever found yourself writing code with a sense Déjà vu? You feel as though the code you are writing has already been written somewhere else. This could potentially be within the same project or even the same file. You do not want to be stuck repeating yourself and you do not want to waste time finding answers to the problems you have already solved. You might already be familiar with the &quot;DRY&quot; principle (Don't Repeat Yourself). Repeating code not only makes your project look sloppy and difficult to read (and therefore manage); it increases the likelihood of bugs and makes the code more difficult to manage. Here are a few helpful tips for producing PHP code that you can use often, but write only once.</p>
<h2>Use Modules</h2>
<p>Modules are reusable packages that can be included across several of your projects. Modules isolate the functionality of one of your project's features, allowing you to maintain these features separately from your projects. You might have several PHP-powered websites, most of which connect to social media platforms. Therefore, you might create a module just for managing your social media accounts. Such a module should not be overly concerned with the particular project it is included in but instead should only care about storing data related to social media sites. Perhaps the module would also provide some sort of front-end component to render this data such as icon links to each social network site. If an update were to be added to support some new feature (perhaps a selectable list of icons), then the update would be made to the module itself and not the websites. Any site that uses this module could receive the update by <a href="https://getcomposer.org/">running composer</a>.</p>
<p>Modules are typically namespaced, meaning their classes can only be used in a project when explicitly including it. For example, the full class name for social media links might look something like &quot;Vendor\SocialMedia\SocialMediaLink&quot;. You could use this class directly by prepending the class with a backslash like:</p>
<pre><code>$facebook = new \Vendor\SocialMedia\SocialMediaLink();
</code></pre>
<p>Or you could include the class with the &quot;use&quot; statement:</p>
<pre><code>use Vendor\SocialMedia\SocialMediaLink;
$facebook = new SocialMediaLink();
</code></pre>
<p>Namespacing your modules ensures that the class names never conflict with those that are defined globally.</p>
<h2>Write Methods for common actions</h2>
<p>There are some processes that will need to occur in several areas of your project. This could be something like formatting dates. It is usually a good idea to keep a consistent date format across a project. Your code could have several functions to retrieve dates, but it could be repeating the same code that formats the date in each. It might make sense for you to write a method just for formatting the dates. With one reusable method for date formatting, you will not find yourself writing the same code in several areas.</p>
<p>Sticking to this idea, consider the purpose of each function before writing. If the function requires several separate processes to occur before the main goal is achieved, it would make sense to break each task out into a separate function. Doing this makes your code more readable and more reusable. For example, your code might have a method that retrieves and renders blog articles that have been marked &quot;Published&quot;. We will call this method &quot;renderPublishedArticles&quot;. If your website has a content management system, it would be a good idea to flag unpublished articles. The code here will likely use a method like &quot;getAllArticles&quot; to list articles in the CMS. Instead of repeating code to check if articles are published in both methods, a better solution would be to write a method that just checks the &quot;Published&quot; status of an article. This method might be named &quot;getPublishedArticles&quot;. The &quot;renderPublishedArticles&quot; and &quot;getAllArticles&quot; methods would both call this method. Because the functionality has been encapsulated in a function name, we know exactly what is happening when reading the code for each method.</p>
<p>If a change has to be made, the change is made in one area of the code, rather than each time the code is repeated. In the case of our date formatting method, we might opt for a different date format. You will thank youself later for writing reusable methods when changes like this are necessary.</p>
<h2>Use Classes to Encapsulate Components</h2>
<p>If you are familiar with Object-Oriented Programming (OOP), you know that you can use classes to encapsulate certain behaviors of your components. In object-oriented programming languages like PHP, you might have a class that represents some type of model. That model will be responsible for defining some data structure, and it will likely provide methods to interact with related components. For example, you might have a class called &quot;Page&quot;. This model might define fillable database fields like &quot;HTML Content&quot; and &quot;Featured Images&quot;. This class could have methods to interact with these relationships, such as a &quot;getRecentFeaturedImages&quot; method.</p>
<p>A website will commonly have different types of pages. Some functionality should be shared between all pages, but some pages will have different concerns. For example, a blog page might be responsible for storing and fetching written articles. A home page will usually feature a large banner image, video, or slideshow. If we want our &quot;Page&quot; class to be extendable, it should only be concerned with the functionality that should be shared across every page type. We could then extend the Page class for each page type and add the appropriate functionality:</p>
<pre><code>class Page
{
 // Define the functionality that should exist on all pages
 ...
}
class HomePage extends Page
{
 // This inherits from &quot;Page&quot;, so just define everything unique to a Home Page
 ...
}
</code></pre>
<h2>Conclusion</h2>
<p>Writing reusable code has a plethora of benefits, as you have seen. Employing these tips means writing code that is consistent everywhere, even across projects. When many common actions are abstracted into separate methods, the code will naturally become more readable and declarative, as most methods will call other methods, each with descriptive names. When functionality needs to be shared between components, having a shared base class that each extends means writing less code overall. While it might be easy to simply paste in some code that is already used somewhere else, it will be more difficult to maintain later on should things change. Instead, think about how to keep each bit of your code clear in its purpose, so that it is reusable, should you need it for something else tomorrow.</p>

        ]]>
    </content>
  </entry><entry>
    <id>/posts%5CTake_Your_Web_App_from_React_To_React_Native.html</id>
    <title>Take%20Your%20Web%20App%20from%20React%20To%20React%20Native</title>
    <updated>2021-01-26T02:33:05+00:00</updated>
    <published>2021-01-26T02:33:05+00:00</published>
    <link href="/posts%5CTake_Your_Web_App_from_React_To_React_Native.html"/>
    <summary>tags%3A%20%5Bexpo%5D%20%23%20Take%20Your%20Web%20App%20from%20React%20To%20React%20Native%20Most%20of%20us%20Web%20Developers%20have%20never%20had%20the%20experience%20of%20building%20a%20mobile%20app.%20The%20task%20may%20seem%20daunting%20and%20out%20of%20the%20usual%20comfort%20zone.%20You%20might%20be%20starting%20with%20no%20Java%20or%20Swift%20experience.%20Learning%20both%20will%20take%20some%20time%2C%20and%20you%20would%20need%20to%20manage%20two%20codebases.%20Lucky%20for%20us%2C%20there%20is%20React%20Native%20and%20Expo.%20%3Cimg%20alt%3D%22%22%20src%3D%22images/reactNative.png%22%20height%3D%22228%22%20width%3D%22456%22%20/%3ECreate%20cross-platform%20mobile%20apps%20with%20React%20Native%20React%20Native%20lets%20us%20developers%20write%20mobile%20apps%20in%20React%2C%20no%20Java%20or%20Swift%20experience%20required....</summary>
    <content type="html" xml:lang="en" xml:base="">
        <![CDATA[
        <p>tags: [expo]</p>
<h1>Take Your Web App from React To React Native</h1>
<p>Most of us Web Developers have never had the experience of building a mobile app. The task may seem daunting and out of the usual comfort zone. You might be starting with no Java or Swift experience. Learning both will take some time, and you would need to manage two codebases. Lucky for us, there is React Native and Expo.</p>
<p><img alt="" src="images/reactNative.png" height="228" width="456" />Create cross-platform mobile apps with React Native</p>
<p>React Native lets us developers write mobile apps in React, no Java or Swift experience required. Expo further simplifies the development process. It provides commonly used libraries. It sets up a development environment. It provides debugging tools and much more. With both of these tools, some React experience, and some wit, any web developer can develop their app for iPhone and Android. If you follow these steps, you too can transform your web-based React code into working React Native code.</p>
<p><img alt="" src="images/expo-logo.png" height="201" width="411" />Simplify development. Spend less time getting set up and more time building your app.</p>
<h2>Replace &lt;div&gt;s with &lt;View&gt;s</h2>
<p>The &quot;&lt;div&gt;&quot; tag is perhaps the most commonly used element when it comes to web development. React Native has its own version of &quot;&lt;div&gt;&quot;: the &quot;&lt;View&gt;&quot;. Views are used to wrap content areas in your app's layout. Go ahead, copy and paste your web-based React code into your expo app, run a search for &quot;div&quot; and replace it with &quot;View&quot;. Your project may contain other wrappers such as &quot;&lt;section&gt;&quot; or &quot;&lt;article&gt;&quot;. Be sure to replace these as well. Your content wrappers are now native friendly, and you are one step closer to transitioning your app to mobile. Now, let's take care of the text content.</p>
<h2>Replace Text Elements with &lt;Text&gt; tags</h2>
<p>On the web, there are many different types of text tags. You could have headers in the form of &quot;&lt;h1&gt;&quot; down to &quot;&lt;h6&gt;&quot;. Your project might have text in &quot;&lt;span&gt;&quot;, &quot;&lt;p&gt;&quot;, or &quot;&lt;label&gt;&quot; tags. Anywhere there is text, we will replace the tags with the &quot;&lt;Text&gt;&quot; element. Do this with any plain text in your project, but you can skip any links that use the &quot;&lt;a&gt;&quot; tag for now. This will be handled by a different React Native component, which we will cover next.</p>
<h2>Replace Anchor Tag Links With &lt;Button&gt;s</h2>
<p>Links on the web use the anchor tag: &quot;&lt;a&gt;&quot; with an &quot;href&quot; attribute describing the link's destination. We will replace these links with the React Native &quot;&lt;Button&gt;&quot; element. The text within the link should be moved to the &quot;title&quot; prop of the Button (e.g. &lt;Button title=&quot;Click me&quot;/&gt;). As for the &quot;href&quot;, you will instead define a function to navigate to a screen. This will be placed within the &quot;onPress&quot; prop. <a href="https://reactnative.dev/docs/navigation">Here is a more in-depth guide</a> on how to do this. Some links may also pass data in the form of &quot;GET&quot; variables (e.g. &quot;http://example.com?foo=bar&quot;). The variable &quot;foo&quot; has the value of &quot;bar&quot;. In React Native, you can pass data as an object in the second argument of the navigation function. You would instead write something like: &quot;navigation.navigate('Example', {foo: 'bar'})&quot;.</p>
<p>You still may need to update &quot;&lt;input&gt;&quot;s to &quot;&lt;TextInput&gt;&quot;s or &quot;&lt;video&gt;&quot;s to &quot;&lt;Video&gt;&quot;s, but by now you should see that for every web element, there is a React Native equivalent component. Take some time to confirm each HTML tag is replaced with the appropriate component. With all of these changes, your app should be well on its way to working on iPhone and Android.</p>

        ]]>
    </content>
  </entry><entry>
    <id>/posts%5CStop_Making_Site_Updates_Harder_For_Yourself_%26_Customers.html</id>
    <title>Stop%20Making%20Site%20Updates%20Harder%20For%20Yourself%20%26%20Customers</title>
    <updated>2020-09-15T00:41:41+00:00</updated>
    <published>2020-09-15T00:41:41+00:00</published>
    <link href="/posts%5CStop_Making_Site_Updates_Harder_For_Yourself_%26_Customers.html"/>
    <summary>tags%3A%20%5Bbusiness%5D%20%23%20Stop%20Making%20Site%20Updates%20Harder%20For%20Yourself%20%26%20Customers%20Imagine%20if%20every%20time%20you%20needed%20to%20start%20your%20car%2C%20you%20first%20had%20to%20install%20the%20engine.%20No%20one%20would%20ask%20to%20borrow%20your%20car%2C%20but%20you%20would%20be%20reluctant%20to%20use%20it%20yourself.%20No%20one%20wants%20a%20mundane%20task%20to%20take%20anymore%20time%20and%20effort%20than%20is%20required.%20Simple%20problems%20should%20have%20simple%20solutions%2C%20and%20updates%20to%20our%20websites%20should%20be%20painless.%20A%20site%20that%20works%20on%20one%20machine%2C%20should%20work%20on%20any%20machine.%20A%20site%20that%20needs%20a%20single%20change%20in%20punctuation%20on%20a%20single%20page%2C...</summary>
    <content type="html" xml:lang="en" xml:base="">
        <![CDATA[
        <p>tags: [business]</p>
<h1>Stop Making Site Updates Harder For Yourself &amp; Customers</h1>
<p>Imagine if every time you needed to start your car, you first had to install the engine. No one would ask to borrow your car, but you would be reluctant to use it yourself. No one wants a mundane task to take anymore time and effort than is required. Simple problems should have simple solutions, and updates to our websites should be painless. A site that works on one machine, should work on any machine. A site that needs a single change in punctuation on a single page, should not require a developer.</p>
<h2>Use different environments</h2>
<p>Development of a website often begins locally. The site is installed on the same computer the developer works with. When the site is finished, it is often staged in a development environment. The website is accessible from the internet, but it is not yet optimized for the public. When the site is ready to go live, it is installed again in a separate production environment. The site should function nearly identical in all three environments, but certain things should behave differently. In the case of an overlooked fatal error, we wouldn't want to show an end-user a long error trace; only the developer cares about that sort of thing. When entering payment information, we wouldn't want a real transaction to occur during development. Our site should behave differently in subtle ways, depending on our environment. Managing three different codebases for each environment would be highly inefficient and prone to errors. This is where environment variables come into play. With a single configuration file, we can control every setting that should differ in each instance of our site. The code should read the declared environment variables, and decide whether it should actually charge a debit card, or run a fake transaction in a test sandbox.</p>
<img alt="" src="images/environment.jpg" height="328" width="493" />
<i>In windy environments, the turbines are more effective at producing power</i>
<h2>Break stuff in isolation</h2>
<p>Implementing this workflow means that updates for a website are relatively painless for everyone. You and your customers will not have to sweat nervously when making changes that could range from small to dramatic. A developer can work comfortably in a local environment, free to break anything without consequence. Compare this to working on a production site blindly. Both parties risk facing devastating consequences while making changes live and on the fly.</p>
<img alt="" src="images/solar-panel.jpg" height="326" width="492" />
<i>Also a source of power, solar panels are more appropriate in sunny environments</i>
<h2>Use a CMS</h2>
<p>Think about installing your car engine to drive again. If you are a mechanic, this might feel tedious and time-consuming, but you are confident in your ability to start the car. Now, imagine that the only thing that you are familiar with is the brake pedal, gas pedal, and steering wheel. Starting that car is going to feel intimidating and daunting. You may just decide to walk that day.</p>
<p>Your customers do not want to install an engine just to drive. When it comes to their website, content should be updated easily, without any need to touch code. Thankfully, we have Content Management Systems to solve this problem. A developer will write code that will define page types and data objects. This code will make use of templates to layout the content of the site. From this point, content can be entered in a user-friendly Graphical User Interface and published to the site. A great Content Management System, as well as my personal favorite, is SilverStripe. SilverStripe makes both the developers and customers' lives easier when bringing sites to life. Silverstripe is clean and comprehensible, both in its code and in its user interface. You can check out my tutorials on the SilverStripe CMS and Framework here <a href="https://www.youtube.com/watch?v=XVOianFRSl0">https://www.youtube.com/watch?v=XVOianFRSl0</a></p>
<p><img src="images/silverstripe.png" alt="" />Learn SilverStripe and save everyone some headache</p>
<p>KISS is not only a hard rock band from the 1970s, but a clever acronym when avoiding complexity. Keep It Simple Stupid. You and your customers do not want risky changes made to a site running in production. Your customers want things to be as easy as pie. Give them a CMS that both of you will love. Just remember to KISS; everyone enjoys it.</p>

        ]]>
    </content>
  </entry><entry>
    <id>/posts%5CTools_I_took_for_granted.html</id>
    <title>Tools%20I%20took%20for%20granted</title>
    <updated>2020-03-08T17:30:08+00:00</updated>
    <published>2020-03-08T17:30:08+00:00</published>
    <link href="/posts%5CTools_I_took_for_granted.html"/>
    <summary>%23%20Tools%20I%20took%20for%20granted...</summary>
    <content type="html" xml:lang="en" xml:base="">
        <![CDATA[
        <h1>Tools I took for granted</h1>
<p>With today's modern work-flow, it is easy to feel spoiled with all of our handy tools. Git allows us to rollback to any previous commit in our application, just in case something were to go horribly wrong. A CMS allows us to easily update content without ever touching the code. Package managers like NPM and Composer can provide our project with all of its dependencies simply by running a command. But developers are not always working on new code. A majority of time is spent working on existing code. Some of that code may feel severely antiquated from what we are used to.</p>
<h2>Git</h2>
<p>Imagine starting on a new project without Git. Scary right? Git is an essential part of today's development. However, you may find yourself working on an older project that does not use version control. To safely make changes you will need to create a backup of every file you change. That way if you do break something you are left SOL. When you are ready to make your changes live, you cannot just pull to a repository. You will need to FTP every file you changed individually. All of this is a huge headache by today's standards. Not only are you at a much higher risk of creating irreversible damage, but you must keep track of moving parts manually.</p>
<h2>Content Management Systems</h2>
<p>Content management systems make customizing your pages very simple. With a CMS you can upload content to your site without any need to touch the code. But what if you have a static site made up of several HTML files and no CMS? If you need to make a change to the frame of your site (navigation, footers, etc...), that change will have to be made across several files. Now, you could use a search and replace tool to make this happen all at once, but what if you have something like a &quot;selected&quot; class on navigation items? Each page will have the same navigation but with a unique selected value. You can start to imagine the headache of editing nearly identical elements across several files. With most content management systems, this is all taken care of.</p>
<h2>Package Managers</h2>
<p>With package managers, by running a single command, you can install all of your projects dependencies. Older projects may not be fortunate enough to include this. When working on a project like this, you may need to individually initiatialize and update submodules. It can be unclear what packages your project requires You may find yourself refreshing your browser until the errors are gone. With tools like Composer and NPM, these concerns are eliminated, so you can spend more time working on your project than resolving dependency issues.</p>
<h2>Let your tools do the work</h2>
<p>Modern tools make our lives as developers much easier. However, we still find ourselves supporting older projects without these amenities. Working with these systems is far from impossible, but more caution and patience is often required.</p>

        ]]>
    </content>
  </entry><entry>
    <id>/posts%5CBecoming_part_of_a_team.html</id>
    <title>Becoming%20part%20of%20a%20team</title>
    <updated>2019-09-14T13:22:52+00:00</updated>
    <published>2019-09-14T13:22:52+00:00</published>
    <link href="/posts%5CBecoming_part_of_a_team.html"/>
    <summary>tags%3A%20%5Bgit%5D%20%23%20Becoming%20part%20of%20a%20team%20As%20of%20this%20writing%2C%20I%20am%20a%20few%20weeks%20into%20my%20first%20job%20as%20a%20junior%20web%20developer.%20I%20am%20thrilled%20to%20become%20part%20of%20an%20active%20development%20team.%20I%20had%20practiced%20and%20learned%20on%20my%20own%2C%20and%20now%20I%20must%20do%20so%20in%20a%20team.%20The%20first%20few%20days%20have%20taught%20me%20a%20few%20things%20about%20working%20in%20a%20business%20setting.%20I%20have%20learned%20that%20it%20is%20important%20to%20keep%20track%20of%20the%20time%20that%20I%20put%20into%20my%20tasks.%20I%20am%20becoming%20more%20familiar%20with%20the%20process%20of%20submitting%20pull...</summary>
    <content type="html" xml:lang="en" xml:base="">
        <![CDATA[
        <p>tags: [git]</p>
<h1>Becoming part of a team</h1>
<p>As of this writing, I am a few weeks into my first job as a junior web developer. I am thrilled to become part of an active development team. I had practiced and learned on my own, and now I must do so in a team. The first few days have taught me a few things about working in a business setting. I have learned that it is important to keep track of the time that I put into my tasks. I am becoming more familiar with the process of submitting pull requests and receiving code reviews. I have learned to keep track of cards and organize my assignments with Trello.</p>
<h2>Doing real work for the real world</h2>
<p>When working on projects for real clients, it is important to be accurate and transparent with the cost of development. It also helps developers have a better estimate on the amount of time a feature will take to build. That is why it is important for me to track my times. I was introduced to a program called &quot;Minute7&quot;. It is a simple and handy tool for tracking time. I simply enter the client, the task, and the times I started and concluded working on a task. It is not overly complex, and it helps those on the business end accurately quote clients and make more informed decisions.</p>
<img alt="" src="images/minute7.jpg" height="170" width="302" />
<h2>Working with teammates</h2>
<p>With my new assignments, I get to practice the process of submitting pull requests. I am more comfortable creating branches for specific requests, and leaving helpful descriptions for the developers reviewing my code. After my code is reviewed, I go back through my code to make the appropriate changes. If everything looks good, I merge and delete the branch I was working on. Git and GitHub are very useful and robust tools especially when working in a team.</p>
<img alt="" src="images/github.jpg" height="154" width="274" />
<p>The team needs to keep track of who does what, so that is where Trello comes in. Trello is what I can use to keep track of the tasks assigned to me, and what the team can use to stay organized with who is doing what. I have learned to provide relevant links to my work, and how some tasks will later be split into tasks with cards of their own. Trello keeps everything organized into separate boards, and it makes it simple to find what needs done.</p>
<img alt="" src="images/Trello.png" height="217" width="217" />
<p>Starting my first job in web development is very exciting. I am learning how a team works to satisfy many clients and create work of high quality. The team must have an estimate on the time an assignment will take, review the code for said assignment, and keep track of who is working on it. It was highly satisfying to complete my first tasks, and I am excited to learn more.</p>

        ]]>
    </content>
  </entry><entry>
    <id>/posts%5CThe_End_of_My_Internship.html</id>
    <title>The%20End%20of%20My%20Internship</title>
    <updated>2019-08-06T17:04:17+00:00</updated>
    <published>2019-08-06T17:04:17+00:00</published>
    <link href="/posts%5CThe_End_of_My_Internship.html"/>
    <summary>tags%3A%20%5Bclients%5D%20%23%20The%20End%20of%20My%20Internship%20In%20May%20of%20this%20year%2C%20I%20got%20my%20first%20web%20development%20Internship.%20It%20has%20been%20a%20twelve%20week%20program%2C%20rebuilding%20site%20in%20the%20company%27s%20framework.%20During%20this%20time%2C%20I%20took%20time%20off%20from%20work%20so%20I%20could%20continue%20to%20my%20self-education%20in%20my%20spare%20time.%20This%20gave%20me%20much%20more%20flexibility%20to%20practice%20and%20learn.%20I%20was%20able%20to%20be%20especially%20productive%20with%20my%20time%20in%20the%20internship.%20I%20have%20practiced%20soft%20skills%20such%20as%20writing%20or%20fixing%20documentation%2C%20sharing%20ideas%2C%20and%20public%20speaking.%20%23%23%20New%20Framework%20A%20lot%20of%20my%20recent...</summary>
    <content type="html" xml:lang="en" xml:base="">
        <![CDATA[
        <p>tags: [clients]</p>
<h1>The End of My Internship</h1>
<p>In May of this year, I got my first web development Internship. It has been a twelve week program, rebuilding site in the company's framework. During this time, I took time off from work so I could continue to my self-education in my spare time. This gave me much more flexibility to practice and learn. I was able to be especially productive with my time in the internship. I have practiced soft skills such as writing or fixing documentation, sharing ideas, and public speaking. </p>
<h2>New Framework</h2>
<p>A lot of my recent training has been focused on SilverStripe, a PHP CMS and framework. On the surface, SilverStripe seems similar to something like WordPress. SilverStripe, however, is not just a CMS but also an MVC framework, something like Laravel. It is not as simple as editing a theme and installing a few plugins. SilverStripe is largely based around having classes represent page types and having those classes provide fields for the CMS. Templates will then &quot;listen&quot; to the data entered in said fields.</p>
<p>Learning SilverStripe has taught me how to create dynamic websites with an easy to use CMS, and I am interested in using it for my own projects.</p>
<img alt="" src="images/silverstripe.png" height="145" width="412" />
<h2>Software for working in teams</h2>
<p>Alongside learning a framework/CMS, I have also been able to pick up on a few soft skills. During my internship, I have had several developers available to learn from and to review my code. Whenever I have questions, I can reach out to someone on Slack or leave a comment on a pull request. I have been told it is a good idea to be as descriptive as possible, so that other developers can understand my thought process. Doing so makes it easier to solve problems and helps to improve my communication. I also get to participate in both staff and developer meetings. Here, I get to share my ideas and recent progress, as well as watch how others communicate. The internship has helped me become more confidant when speaking in front of other people.</p>
<img alt="" src="images/slack.png" height="208" width="401" />
<h2>How I landed this in the first place</h2>
<p>In addition to the practice I got at the internship, I have also developed my communication skills outside of the office. I recently gave a talk at the Coderie Meetup group about my experiences. The idea was given to me by a member of the company. Public speaking also helps improve my ability to talk to clients. I have had a few face to face meetings with small business owners who are looking for their own website. In these meetings, I have been able to showcase what I have been working on, as well as receive feedback to move forward with. Not everyone has met with me in person, though I have finished websites for both clients that I met online exclusively and for those I met in person.</p>
<img alt="" src="images/coderie.png" height="78" width="332" />
<p>During my internship, my skills as a developer have improved greatly. I am able to use SilverStripe to create dynamic websites. I practiced my communication with other developers, staff, and clients. Lastly, I took what I learned, and I applied it to my own work. With no college education, I feel privileged to have had this opportunity, and I have benefited from it greatly.</p>

        ]]>
    </content>
  </entry><entry>
    <id>/posts%5CLinux_to_a_lifetime_Windows_User.html</id>
    <title>Linux%20to%20a%20lifetime%20Windows%20User</title>
    <updated>2019-04-11T20:41:38+00:00</updated>
    <published>2019-04-11T20:41:38+00:00</published>
    <link href="/posts%5CLinux_to_a_lifetime_Windows_User.html"/>
    <summary>tags%3A%20%5Blinux%5D%20%23%20Linux%20to%20a%20lifetime%20Windows%20User%20Microsoft%20Windows%20was%20the%20first%20operating%20system%20that%20I%20had%20ever%20used.%20My%20first%20computer%20was%20a%20hand-me-down%20Windows%20XP%20desktop%20from%20my%20parents.%20I%20had%20never%20had%20the%20chance%20to%20try%20an%20Apple%20computer%20until%20middle%20school.%20The%20school%20district%20there%20had%20used%20all%20Apple%20products.%20Not%20until%20graduating%20High%20School%20and%20teaching%20myself%20to%20code%20did%20I%20ever%20install%20my%20own%20Linux%20distro.%20%23%23%20What%20the%20heck%20is%20a%20Linux%20and%20who%20makes%20it%3F%20I%20do%20not%20remember%20the%20first%20time%20that%20I%20heard%20about%20Linux%2C%20but%20the%20concept...</summary>
    <content type="html" xml:lang="en" xml:base="">
        <![CDATA[
        <p>tags: [linux]</p>
<h1>Linux to a lifetime Windows User</h1>
<p>Microsoft Windows was the first operating system that I had ever used. My first computer was a hand-me-down Windows XP desktop from my parents. I had never had the chance to try an Apple computer until middle school. The school district there had used all Apple products. Not until graduating High School and teaching myself to code did I ever install my own Linux distro.</p>
<h2>What the heck is a Linux and who makes it?</h2>
<p>I do not remember the first time that I heard about Linux, but the concept seemed very different from what I had expected about computers at the time. I did not understand how a free piece of software could be distributed. How can people work together to create something that is not maintained by one company, calling all the shots. How could something distributed and developed by hundreds of people work in an &quot;open source&quot; environment. And if there are more than one distribution, how could they all call themselves &quot;<em>Linux</em>&quot;.</p>
<p>Not until recently had I decided to give it a try. I started first with Linux Mint, as it was designed to feel very familiar to a Windows user.</p>
<p><img src="images/Logo_Linux_Mint.png" alt="" />Mint Logo</p>
<h2>The terminal is not so scary</h2>
<p>I was enjoyed Linux Mint for the time I used it. I am somewhat familiar with the command line interface from Windows, so the terminal felt right at home for me. It is true that Linux expects you to use the terminal. That sounds scary, but it is not as bad as it sounds. It started for me as using Google or DuckDuckGo to find anything I needed to do. Then simply copying and pasting.</p>
<p>After getting the hang of it, the terminal becomes a very helpful and intuitive tool. Creating files, editing text, and running programs in the command line should feel right at home for developers.</p>
<h2>Distro Hopping</h2>
<p>Although I had enjoyed Mint, I ran into problems with my Nvidia drivers, and the whole thing became too much of a headache to worry about, so I decided to try out another distribution, Pop!_os, (or just Pop! for short).</p>
<p>Pop! is my currently installed distribution, and I like it because it works almost right out of the box for games thanks to the elimination of that pesky driver problem mentioned earlier. Pop! is not so much geared towards mimicking Windows like Mint is, but it is very easy to understand. Almost anyone could easily get started with Pop! in minutes.</p>
<p><img src="images/pop.png" alt="" /></p>
<p>Linux is as hard as you want it to be these days. I really think Linux is something that anyone can do, and it is well worth the effort to understand it. I personally am just getting started to learning Linux, and understand that there is a deep underbelly to Linux to explore, and some parts are pretty scary to beginners. Linux is really is as hard as you want it to be.</p>

        ]]>
    </content>
  </entry><entry>
    <id>/posts%5CBugs_I_needed_a_user_to_find.html</id>
    <title>Bugs%20I%20needed%20a%20user%20to%20find</title>
    <updated>2019-03-19T17:55:09+00:00</updated>
    <published>2019-03-19T17:55:09+00:00</published>
    <link href="/posts%5CBugs_I_needed_a_user_to_find.html"/>
    <summary>tags%3A%20%5Bcss%5D%20%23%20Bugs%20I%20needed%20a%20user%20to%20find%20Using%20things%20more%20often%20makes%20them%20easier%20to%20use%20again.%20When%20I%20work%20on%20projects%2C%20I%20know%20what%20I%20want%20the%20project%20to%20be%20at%20the%20end.%20I%20know%20what%20it%20should%20look%20like%20and%20how%20I%20want%20to%20work.%20But%20then%20there%20are%20things%20that%20I%20do%20not%20think%20of.%20Recently%2C%20I%20have%20finished%20a%20list%20of%20changes%20that%20I%20would%20make%20to%20my%20portfolio%20and%20personal%20projects.%20I%20finished%20everything%20task%20list%2C%20and%20to%20me%2C%20I%20thought%20everything%20looked%20good.%20I%20started%20to%20show%20my%20portfolio%20to%20people...</summary>
    <content type="html" xml:lang="en" xml:base="">
        <![CDATA[
        <p>tags: [css]</p>
<h1>Bugs I needed a user to find</h1>
<p>Using things more often makes them easier to use again. When I work on projects, I know what I want the project to be at the end. I know what it should look like and how I want to work. But then there are things that I do not think of. Recently, I have finished a list of changes that I would make to my portfolio and personal projects.</p>
<p>I finished everything task list, and to me, I thought everything looked good. I started to show my portfolio to people I knew. I asked them what they thought and what they suggested. One person was having a hard time using the navigation, something that I did not expect to be a snag. I did not blame her, and decided to redo the navigation to make it easier.</p>
<p>What I noticed first was that it was not obvious that any content existed further down the page. I thought of ways I could clue the user into scrolling down. I came up on the idea of a downwards pointing arrow that bobs and disappears after scrolling.</p>
<p><img alt="" src="images/arrowDown.png" height="147" width="102" /><em>Canvas zigzag</em></p>
<p>Next, I noticed that a heading looked like a button. I removed the underline from the text to prevent it from looking interactive.</p>
<p><img src="images/books_read.png" alt="" /><em>Admittedly, this did look like any underlined link</em></p>
<p>Finally, there was no indication of the current page, so I added an underline.</p>
<p><img src="images/navbar.png" alt="" /><em>I did this by utilizing React State and inline styles</em></p>
<p>My portfolio is much easier to navigate now with these simple changes. You can find my site at <a href="http://tylertrout.com">https://tylertrout.com</a></p>

        ]]>
    </content>
  </entry>
</feed>
